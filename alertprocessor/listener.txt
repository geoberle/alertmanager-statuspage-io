package listener

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/prometheus/alertmanager/template"
	"github.com/prometheus/common/log"
)

func Listen(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello!")

	data, err := readRequestBody(r)
	if err != nil {
		log.Errorf("Error reading request body : %v", err)
		sendJSONResponse(w, http.StatusBadRequest, err.Error())
		return
	}

	err = onAlertGroup(data)

	if err != nil {
		log.Errorf("Error managing incident from alert : %v", err)
		sendJSONResponse(w, http.StatusInternalServerError, err.Error())
		return
	}

	// Returns a 200 if everything went smoothly
	sendJSONResponse(w, http.StatusOK, "Success")
}

func readRequestBody(r *http.Request) (template.Data, error) {

	// Do not forget to close the body at the end
	defer r.Body.Close()

	// Extract data from the body in the Data template provided by AlertManager
	data := template.Data{}
	err := json.NewDecoder(r.Body).Decode(&data)

	return data, err
}

func sendJSONResponse(w http.ResponseWriter, status int, message string) {
	//webhookRequests.WithLabelValues(strconv.Itoa(status)).Inc()
	//webhookLastRequest.SetToCurrentTime()

	data := JSONResponse{
		Status:  status,
		Message: message,
	}
	bytes, _ := json.Marshal(data)

	w.WriteHeader(status)
	_, err := w.Write(bytes)

	if err != nil {
		log.Errorf("Error writing JSON response: %s", err)
	}
}

// JSONResponse is the Webhook http response
type JSONResponse struct {
	Status  int
	Message string
}

type TemplateData struct {
	template.Data
}

func onAlertGroup(data template.Data) error {

	log.Infof("Received alert group: Status=%s, GroupLabels=%v, CommonLabels=%v, CommonAnnotations=%v",
		data.Status, data.GroupLabels, data.CommonLabels, data.CommonAnnotations)

	getParams := map[string]string{
		config.Workflow.IncidentGroupKeyField: getGroupKey(data),
	}

	existingIncidents, err := serviceNow.GetIncidents(config.ServiceNow.TableName, getParams)
	if err != nil {
		serviceNowError.Inc()
		return err
	}
	log.Infof("Found %v existing incident(s) for alert group key: %s.", len(existingIncidents), getGroupKey(data))

	updatableIncidents := filterUpdatableIncidents(existingIncidents)
	log.Infof("Found %v updatable incident(s) for alert group key: %s.", len(updatableIncidents), getGroupKey(data))

	var updatableIncident Incident
	if len(updatableIncidents) > 0 {
		updatableIncident = updatableIncidents[0]

		if len(updatableIncidents) > 1 {
			log.Warnf("As multiple updable incidents were found for alert group key: %s, first one will be used: %s", getGroupKey(data), updatableIncident.GetNumber())
		}
	}

	if data.Status == "firing" {
		return onFiringGroup(data, updatableIncident)
	} else if data.Status == "resolved" {
		return onResolvedGroup(data, updatableIncident)
	} else {
		log.Errorf("Unknown alert group status: %s", data.Status)
	}

	return nil
}

func onFiringGroup(data template.Data, updatableIncident Incident) error {
	incidentCreateParam, err := alertGroupToIncident(data, updatableIncident)
	if err != nil {
		return err
	}

	incidentUpdateParam := filterForUpdate(incidentCreateParam)

	if updatableIncident == nil {
		log.Infof("Found no updatable incident for firing alert group key: %s", getGroupKey(data))
		if _, err := serviceNow.CreateIncident(config.ServiceNow.TableName, incidentCreateParam); err != nil {
			serviceNowError.Inc()
			return err
		}
	} else {
		log.Infof("Found updatable incident (%s), with state %s, for firing alert group key: %s", updatableIncident.GetNumber(), updatableIncident.GetState(), getGroupKey(data))
		if _, err := serviceNow.UpdateIncident(config.ServiceNow.TableName, incidentUpdateParam, updatableIncident.GetSysID()); err != nil {
			serviceNowError.Inc()
			return err
		}
	}
	return nil
}

func onResolvedGroup(data template.Data, updatableIncident Incident) error {
	incidentCreateParam, err := alertGroupToIncident(data, updatableIncident)
	if err != nil {
		return err
	}

	incidentUpdateParam := filterForUpdate(incidentCreateParam)

	if updatableIncident == nil {
		log.Infof("Found no updatable incident for resolved alert group key: %s. No incident will be created/updated.", getGroupKey(data))
	} else {
		log.Infof("Found updatable incident (%s), with state %s, for resolved alert group key: %s", updatableIncident.GetNumber(), updatableIncident.GetState(), getGroupKey(data))
		if _, err := serviceNow.UpdateIncident(config.ServiceNow.TableName, incidentUpdateParam, updatableIncident.GetSysID()); err != nil {
			serviceNowError.Inc()
			return err
		}
	}
	return nil
}
